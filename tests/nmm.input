load 'platforms.input'
load 'nemscommon.input'

########################################################################

# NMM build targets:

build nmm.x {
    use plat
    NEMS.x="@[plat%EXECrt]/NEMS_nmm.x"
    modules.nems="@[plat%INCrt]/NEMS_nmm.x.modules"
    target="@[NEMS.x]"
#    build=rt.sh_build(NEMS.x="@[NEMS.x]",modules.nems="@[modules.nems]",
#        ESMF_VER='nmmb_intel',NEMS_VER='nmm')
    build=NEMSAppBuilder(NEMS.x="@[NEMS.x]",modules.nems="@[modules.nems]",
                         OPTS="app=NMM")
}

build nmm_post.x {
    use plat
    NEMS.x="@[plat%EXECrt]/NEMS_nmm_post.x"
    modules.nems="@[plat%INCrt]/NEMS_nmm_post.x.modules"
    target="@[NEMS.x]"
#    build=rt.sh_build(NEMS.x="@[NEMS.x]",modules.nems="@[modules.nems]",
#        ESMF_VER='nmmb_intel',NEMS_VER='nmm')
    build=NEMSAppBuilder(NEMS.x="@[NEMS.x]",modules.nems="@[modules.nems]",
                         OPTS="app=NMM-POST")
}

build nmm.debug.x {
    use plat
    NEMS.x="@[plat%EXECrt]/NEMS_nmm_debug.x"
    modules.nems="@[plat%INCrt]/NEMS_nmm_debug.x.modules"
    target="@[NEMS.x]"
#    build=rt.sh_build(NEMS.x="@[NEMS.x]",modules.nems="@[modules.nems]",
#        ESMF_VER='nmmb_intel',NEMS_VER='nmm DEBUG=on')
    build=NEMSAppBuilder(NEMS.x="@[NEMS.x]",modules.nems="@[modules.nems]",
                         OPTS="app=NMM-DEBUG")
}

########################################################################

# NMM variables used by many tests:

nmm_vars={
    GBRG='reg'          ,  NEMSI='false'       , RSTRT='false'
    AFFN='core'         ,  NODE=1
    NCHILD='0'          ,  MODE='1-way'        , WGT='0.0'
    FCSTL='48'
    PCPFLG='false'      ,  WPREC='false'
    TS='false'
    RADTN='rrtm'        ,  CONVC='bmj'         , TURBL='myj'
    NP3D='3'            ,  CLDFRACTION='default'
    SFC_LAYER='myj'     ,  LAND_SURFACE='noah'
    MICRO='fer_hires'   ,  gfsP='false'        , SPEC_ADV='false'
}

nmm_uncoupled={
    atm_model='nmm'
    nems_configure='atm_nostep'
}

nmm_aliases={
    wrtdopost="@[WRITE_DOPOST]"
    postgrbvs="@[POST_GRIBVERSION]"
    coupling_interval_fast_sec="@[med_atm_coupling_interval_sec]"
}

nmm_vars_global={
    use plat%nmm_dflt
    use nems_vars
    use common_vars
    use nmm_vars
    use nmm_aliases
    use nmm_uncoupled
    GBRG="glob"
    CNTL_NAME='NMMB_glob'
}

nmm_vars_regional={
    use plat%nmm_dflt
    use nems_vars
    use common_vars
    use nmm_vars
    use nmm_aliases
    use nmm_uncoupled
    GBRG="reg"
    CNTL_NAME='NMMB_reg'
    CONF="@[plat%PARMnems]"          # Configuration files (NEMS/tests)
}

nmm_vars_nests={
    use plat%nmm_nest
    use nems_vars
    use common_vars
    use nmm_vars
    use nmm_aliases
    use nmm_uncoupled
    GBRG="nests"
    CNTL_NAME='NMMB_nests'
    CONF="@[plat%PARMnems]"          # Configuration files (NEMS/tests)
}

nmm_vars_fltr={
    use plat%nmm_fltr
    use nems_vars
    use common_vars
    use nmm_vars
    use nmm_aliases
    use nmm_uncoupled
    GBRG="fltr"
    CNTL_NAME='NMMB_reg_filt'
    CONF="@[plat%PARMnems]"          # Configuration files (NEMS/tests)
}

nmm_vars_mvg={
    use plat%nmm_mvg1
    use nems_vars
    use common_vars
    use nmm_vars
    use nmm_aliases
    use nmm_uncoupled
    GBRG="mnests"
    CNTL_NAME='NMMB_mvg_nests'
    CONF="@[plat%PARMnems]"          # Configuration files (NEMS/tests)
}

nmm_vars_2way={
    use plat%nmm_mvg2
    use nems_vars
    use common_vars
    use nmm_vars
    use nmm_aliases
    use nmm_uncoupled
    GBRG="mnests_2way"
    CNTL_NAME='NMMB_2way_nests'
    CONF="@[plat%PARMnems]"          # Configuration files (NEMS/tests)
}

########################################################################

# NMM Tests:

# NMM GLOBAL -----------------------------------------------------------

# nmm_cntrl test
test nmm_cntrl: nmm.x {
    use nmm_vars_global

    # Convenience variables:
    RUNDIR_ROOT="@[plat%TMPrt]"
    RUNDIR="@[RUNDIR_ROOT]/@[TEST_NAME]"
    TEST_DESCR="Compare NMMB-global results with previous trunk version"
    CNTL="@[plat%BASELINE]/@[CNTL_NAME]"      # Control baseline area
    TEST_IN="@[plat%INPUTS]/@[CNTL_NAME]"   # Test-specific input data
    COM="@[plat%COMrt]/@[TEST_NAME]"

    criteria output {
        #    NEMS.x output file --------- comparison - control file or dir
        "nmmb_hst_01_bin_0000h_00m_00.00s" .bitcmp. "@[CNTL]"
	"nmmb_hst_01_bin_0024h_00m_00.00s" .bitcmp. "@[CNTL]"
	"nmmb_hst_01_bin_0048h_00m_00.00s" .bitcmp. "@[CNTL]"
	"nmmb_hst_01_nio_0000h_00m_00.00s" .bitcmp. "@[CNTL]"
	"nmmb_hst_01_nio_0024h_00m_00.00s" .bitcmp. "@[CNTL]"
	"nmmb_hst_01_nio_0048h_00m_00.00s" .bitcmp. "@[CNTL]"
	"nmmb_rst_01_bin_0024h_00m_00.00s" .bitcmp. "@[CNTL]"
	"nmmb_rst_01_nio_0024h_00m_00.00s" .bitcmp. "@[CNTL]"
    }

    # The prep is run at the top of any job.  It should do such things
    # like making directories and loading modules.
    prep=nems_regtest_prep(
        RUNDIR="@[RUNDIR]",modules="@[nmm.x%modules.nems]",
        CNTL="@[CNTL]")

    # The execute step runs the program:
    spawn execute {
        { "@[nmm.x%NEMS.x]", ranks="@[TASKS]", threads="@[OpenMPThreads]" }
    }

    filters input {
        # work file         operation   input file
     "input_domain_01"        .copy. "@[TEST_IN]/test_input_nmmb_global"
     "input_domain_01_nemsio" .copy. "@[TEST_IN]/test_input_nmmb_global.nemsio"
     "GWD_bin_01"             .copy. "@[TEST_IN]/GWD_bin_01"

     "nems.configure"      .atparse. "@[CONF]/nems.configure.@[nems_configure].IN"
     "atmos.configure"     .atparse. "@[CONF]/atmos.configure_nmm"

     "configure_file_01"   .atparse. "@[CONF]/nmm_conf/nmm_@[GBRG]_conf.IN"
     "model_configure"        .copy. "configure_file_01"

     "*"                   .copydir. "@[plat%NMM_DATA]"

     "VEGPARM.TBL"            .copy. "IGBP_VEGPARM.TBL"
     "LANDUSE.TBL"            .copy. "IGBP_LANDUSE.TBL"
     "ETAMPNEW_DATA"          .copy. "ETAMPNEW_DATA.expanded_rain"
     "fort.28"                .link. "global_o3prdlos.f77"
     "fort.48"                .link. "global_o3clim.txt"

     "solver_state.txt"       .copy. "@[plat%PARMnems]/solver_state.txt"
     "nests.txt"              .copy. "@[plat%PARMnems]/nests.txt"
    }
}

test nmm_nemsio: nmm.x {
    use nmm_cntrl
    NEMSI="true"
    TEST_DESCR="Test NMMB-global NEMSIO as input file"
    criteria output {
        #    NEMS.x output file --------- comparison - control file or dir
        'nmmb_hst_01_bin_0000h_00m_00.00s' .bitcmp. "@[CNTL]"
        'nmmb_hst_01_bin_0048h_00m_00.00s' .bitcmp. "@[CNTL]"
        'nmmb_hst_01_nio_0000h_00m_00.00s' .bitcmp. "@[CNTL]"
        'nmmb_hst_01_nio_0048h_00m_00.00s' .bitcmp. "@[CNTL]"
        'nmmb_rst_01_bin_0024h_00m_00.00s' .bitcmp. "@[CNTL]"
        'nmmb_rst_01_nio_0024h_00m_00.00s' .bitcmp. "@[CNTL]"
    }
}

test nmm_rest: nmm_cntrl, nmm.x {
    use nmm_cntrl
    RSTRT="true"
    TEST_DESCR="Test NMMB-global restart run"
    filters input {
        use nmm_cntrl%input
        "configure_file_01"   .atparse. "@[CONF]/nmm_conf/nmm_@[GBRG]_conf.IN"
        "model_configure"        .copy. "configure_file_01"
        "restart_file_01"        .copy. "@[TEST_IN]/nmmb_rst_01_bin_0024h_00m_00.00s"
        "restart_file_01_nemsio" .copy. "@[TEST_IN]/nmmb_rst_01_nio_0024h_00m_00.00s"
    }
    criteria output {
        #    NEMS.x output file --------- comparison - control file or dir
        "nmmb_hst_01_bin_0048h_00m_00.00s" .bitcmp. "@[CNTL]"
    }
}

test nmm_rest_nio: nmm.x {
    use nmm_cntrl
    NEMSI="true"
    RSTRT="true"
    TEST_DESCR="Test NMMB-global restart run from NEMSIO file"
    filters input {
        use nmm_cntrl%input
        "configure_file_01"   .atparse. "@[CONF]/nmm_conf/nmm_@[GBRG]_conf.IN"
        "model_configure"        .copy. "configure_file_01"
        "restart_file_01_nemsio" .copy. "@[TEST_IN]/nmmb_rst_01_nio_0024h_00m_00.00s"
    }
    criteria output {
        #    NEMS.x output file --------- comparison - control file or dir
	"nmmb_hst_01_bin_0048h_00m_00.00s" .bitcmp. "@[CNTL]"
    }
}

test nmm_decomp: nmm.x {
    use nmm_cntrl
    FCSTL=24
    TEST_DESCR="Test NMMB-global different decomposition"
    criteria output {
        #    NEMS.x output file --------- comparison - control file or dir
	"nmmb_hst_01_bin_0000h_00m_00.00s" .bitcmp. "@[CNTL]"
        "nmmb_hst_01_bin_0024h_00m_00.00s" .bitcmp. "@[CNTL]"
        "nmmb_hst_01_nio_0000h_00m_00.00s" .bitcmp. "@[CNTL]"
        "nmmb_hst_01_nio_0024h_00m_00.00s" .bitcmp. "@[CNTL]"
    }
}

test nmm_thread: nmm.x {
    use nmm_cntrl
    use plat%nmm_thrd
    TEST_DESCR="Test NMMB-global threading"
    # The execute step runs the program:
    spawn execute {
        { "@[nmm.x%NEMS.x]", ranks="@[TASKS]", threads="@[OpenMPThreads]" }
    }
    criteria output {
        #    NEMS.x output file --------- comparison - control file or dir
        'nmmb_hst_01_bin_0000h_00m_00.00s' .bitcmp. "@[CNTL]"
        'nmmb_hst_01_bin_0048h_00m_00.00s' .bitcmp. "@[CNTL]"
	'nmmb_hst_01_nio_0000h_00m_00.00s' .bitcmp. "@[CNTL]"
        'nmmb_hst_01_nio_0048h_00m_00.00s' .bitcmp. "@[CNTL]"
	'nmmb_rst_01_bin_0024h_00m_00.00s' .bitcmp. "@[CNTL]"
        'nmmb_rst_01_nio_0024h_00m_00.00s' .bitcmp. "@[CNTL]"
    }
}

# NMM REGIONAL ---------------------------------------------------------

test nmm_reg_ctl: nmm.x {
    use nmm_vars_regional
    WPREC='true'
    CNTL_NAME='NMMB_reg'
    TEST_DESCR="Compare NMMB-regional results with previous trunk version"

    # Convenience variables:
    COM="@[plat%COMrt]/@[TEST_NAME]"
    RUNDIR_ROOT="@[plat%TMPrt]"
    RUNDIR="@[RUNDIR_ROOT]/@[TEST_NAME]"
    CNTL="@[plat%BASELINE]/@[CNTL_NAME]"      # Control baseline area
    REG_IN="@[plat%INPUTS]/NMMB_reg"          # Regional input data

    # The prep is run at the top of any job.  It should do such things
    # like making directories and loading modules.
    prep=nems_regtest_prep(
        RUNDIR="@[RUNDIR]",modules="@[nmm.x%modules.nems]",
        CNTL="@[CNTL]")

    # The execute step runs the program:
    spawn execute {
        { "@[nmm.x%NEMS.x]", ranks="@[TASKS]", threads="@[OpenMPThreads]" }
    }

    filters input {
        # work file         operation   input file
     "input_domain_01"        .copy. "@[REG_IN]/input_nmmb_regional.d01"
     "input_domain_01_nemsio" .copy. "@[REG_IN]/input_nmmb_regional.d01_nemsio"
     "GWD_bin_01"             .copy. "@[REG_IN]/GWD_bin_01"
     "boco.*"              .copydir. "@[REG_IN]"

     "nems.configure"      .atparse. "@[CONF]/nems.configure.@[nems_configure].IN"
     "atmos.configure"     .atparse. "@[CONF]/atmos.configure_nmm"

     "configure_file_01"   .atparse. "@[CONF]/nmm_conf/nmm_@[GBRG]_conf.IN"
     "model_configure"        .copy. "configure_file_01"

     "*"                   .copydir. "@[plat%NMM_DATA]"

     "VEGPARM.TBL"            .copy. "IGBP_VEGPARM.TBL"
     "LANDUSE.TBL"            .copy. "IGBP_LANDUSE.TBL"
     "ETAMPNEW_DATA"          .copy. "ETAMPNEW_DATA.expanded_rain"
     "fort.28"                .link. "global_o3prdlos.f77"
     "fort.48"                .link. "global_o3clim.txt"

     "solver_state.txt"       .copy. "@[plat%PARMnems]/solver_state.txt"
     "nests.txt"              .copy. "@[plat%PARMnems]/nests.txt"
    }

    criteria output {
        #    NEMS.x output file --------- comparison - control file or dir
        'nmmb_hst_01_bin_0000h_00m_00.00s' .bitcmp. "@[CNTL]"
        'nmmb_hst_01_nio_0000h_00m_00.00s' .bitcmp. "@[CNTL]"
	'nmmb_hst_01_bin_0012h_00m_00.00s' .bitcmp. "@[CNTL]"
        'nmmb_hst_01_nio_0012h_00m_00.00s' .bitcmp. "@[CNTL]"
	'nmmb_hst_01_bin_0048h_00m_00.00s' .bitcmp. "@[CNTL]"
        'nmmb_hst_01_nio_0048h_00m_00.00s' .bitcmp. "@[CNTL]"
	'nmmb_rst_01_bin_0024h_00m_00.00s' .bitcmp. "@[CNTL]"
        'nmmb_rst_01_nio_0024h_00m_00.00s' .bitcmp. "@[CNTL]"
	'pcp.hr1.01.bin'                   .bitcmp. "@[CNTL]"
        'pcp.hr2.01.bin'                   .bitcmp. "@[CNTL]"
        'pcp.hr3.01.bin'                   .bitcmp. "@[CNTL]"
        'pcp.hr4.01.bin'                   .bitcmp. "@[CNTL]"
	'pcp.hr5.01.bin'                   .bitcmp. "@[CNTL]"
        'pcp.hr6.01.bin'                   .bitcmp. "@[CNTL]"
        'pcp.hr7.01.bin'                   .bitcmp. "@[CNTL]"
    }
}

test nmm_reg_ctl_debug: nmm.debug.x {
    use nmm_reg_ctl
    FCSTL=3
    TEST_DESCR="Compare NMMB-regional results with previous trunk version DEBUG"
    # The execute step runs the program:
    spawn execute {
        { "@[nmm.debug.x%NEMS.x]", ranks="@[TASKS]", threads="@[OpenMPThreads]" }
    }
    criteria output {}
}

test nmm_reg_nemsio: nmm.x {
    use nmm_reg_ctl
    WPREC='false'
    CNTL_NAME='NMMB_reg'
    NEMSI='true'
    FCSTL=12
    TEST_DESCR="Test NMMB-regional NEMSIO as input file"

    criteria output {
        #    NEMS.x output file --------- comparison - control file or dir
        'nmmb_hst_01_bin_0000h_00m_00.00s' .bitcmp. "@[CNTL]"
        'nmmb_hst_01_bin_0012h_00m_00.00s' .bitcmp. "@[CNTL]"
        'nmmb_hst_01_nio_0000h_00m_00.00s' .bitcmp. "@[CNTL]"
        'nmmb_hst_01_nio_0012h_00m_00.00s' .bitcmp. "@[CNTL]"
    }
}

test nmm_reg_rst: nmm.x {
    use nmm_reg_ctl
    TEST_DESCR="Test NMMB-regional restart run"
    RSTRT='true'
    WPREC='false'
    filters input {
        use nmm_reg_ctl%input
        "configure_file_01"   .atparse. "@[CONF]/nmm_conf/nmm_@[GBRG]_conf.IN"
        "model_configure"        .copy. "configure_file_01"
        "restart_file_01"        .copy. "@[REG_IN]/nmmb_rst_01_bin_0024h_00m_00.00s"
        "restart_file_01_nemsio" .copy. "@[REG_IN]/nmmb_rst_01_nio_0024h_00m_00.00s"
    }
    criteria output {
        "nmmb_hst_01_bin_0048h_00m_00.00s" .bitcmp. "@[CNTL]"
    }
}

test nmm_reg_rst_debug: nmm.debug.x {
    use nmm_reg_rst
    TEST_DESCR="Test NMMB-regional restart run DEBUG"
    FCSTL=27
    spawn execute {
        { "@[nmm.debug.x%NEMS.x]", ranks="@[TASKS]", threads="@[OpenMPThreads]" }
    }
    filters input {
        use nmm_reg_rst%input
        "configure_file_01"   .atparse. "@[CONF]/nmm_conf/nmm_@[GBRG]_conf.IN"
        "model_configure"     .copy.    "configure_file_01"
    }
    criteria output {}
}

test nmm_reg_rst_nio: nmm.x {
    use nmm_reg_rst
    TEST_DESCR="Test NMMB-regional restart run with NEMSIO file"
    NEMSI='true'
}

test nmm_reg_rst_nio_debug: nmm.debug.x {
    use nmm_reg_rst_debug
    TEST_DESCR="Test NMMB-regional restart run with NEMSIO file DEBUG"
    NEMSI='true'
    filters input {
        use nmm_reg_rst_debug%input
        "configure_file_01"   .atparse. "@[CONF]/nmm_conf/nmm_@[GBRG]_conf.IN"
        "model_configure"     .copy.    "configure_file_01"
    }
}


test nmm_reg_decomp: nmm.x {
    use nmm_reg_ctl
    INPES=plat%nmm_dflt%INPES
    JNPES=plat%nmm_dflt%JNPES
    WPREC='false'
    TEST_DESCR="Test NMMB-regional different decomposition"
    FCSTL=12
    criteria output {
        'nmmb_hst_01_bin_0000h_00m_00.00s' .bitcmp. "@[CNTL]"
        'nmmb_hst_01_bin_0012h_00m_00.00s' .bitcmp. "@[CNTL]"
    }
}

test nmm_reg_thread: nmm.x {
    use nmm_reg_ctl
    use plat%nmm_thrd
    TEST_DESCR="Test NMMB-regional threading"
    WPREC='false'
    criteria output {
        'nmmb_hst_01_bin_0000h_00m_00.00s' .bitcmp. "@[CNTL]"
        'nmmb_hst_01_bin_0048h_00m_00.00s' .bitcmp. "@[CNTL]"
        'nmmb_hst_01_nio_0000h_00m_00.00s' .bitcmp. "@[CNTL]"
        'nmmb_hst_01_nio_0048h_00m_00.00s' .bitcmp. "@[CNTL]"
        'nmmb_rst_01_bin_0024h_00m_00.00s' .bitcmp. "@[CNTL]"
        'nmmb_rst_01_nio_0024h_00m_00.00s' .bitcmp. "@[CNTL]"
    }
    # The execute step runs the program:
    spawn execute {
      { "@[nmm.x%NEMS.x]", ranks="@[TASKS]", threads="@[OpenMPThreads]", ppn="@[ThreadPPN]" }
    }
}

test nmm_reg_sel_phy: nmm.x {
    use nmm_reg_ctl
    TEST_DESCR="Test NMMB-regional with selected GFS physics schemes"
    CNTL_NAME='NMMB_reg_sel_phy'
    WPREC='false'
    FCSTL='24'
    CONVC='sas'
    MICRO='gfs'
    TURBL='gfs'
    criteria output {
        'nmmb_hst_01_bin_0000h_00m_00.00s' .bitcmp. "@[CNTL]"
        'nmmb_hst_01_bin_0024h_00m_00.00s' .bitcmp. "@[CNTL]"
        'nmmb_hst_01_nio_0000h_00m_00.00s' .bitcmp. "@[CNTL]"
        'nmmb_hst_01_nio_0024h_00m_00.00s' .bitcmp. "@[CNTL]"
        'nmmb_rst_01_bin_0012h_00m_00.00s' .bitcmp. "@[CNTL]"
        'nmmb_rst_01_nio_0012h_00m_00.00s' .bitcmp. "@[CNTL]"
    }
}

test nmm_reg_spec_adv: nmm.x {
    use nmm_reg_ctl
    SPEC_ADV='true'
    FCSTL='24'
    NEMSI='true'
    WPREC='false'
    CNTL_NAME='NMMB_reg_spec_adv'
    criteria output {
        'nmmb_hst_01_bin_0000h_00m_00.00s' .bitcmp. "@[CNTL]"
        'nmmb_hst_01_bin_0024h_00m_00.00s' .bitcmp. "@[CNTL]"
        'nmmb_hst_01_nio_0000h_00m_00.00s' .bitcmp. "@[CNTL]"
        'nmmb_hst_01_nio_0024h_00m_00.00s' .bitcmp. "@[CNTL]"
        'nmmb_rst_01_bin_0012h_00m_00.00s' .bitcmp. "@[CNTL]"
        'nmmb_rst_01_nio_0012h_00m_00.00s' .bitcmp. "@[CNTL]"
    }
}

test nmm_reg_spec_adv_rst: nmm.x {
    use nmm_reg_spec_adv
    RSTRT='true'
    CNTL_NAME='NMMB_reg_spec_adv'
    filters input {
        use nmm_reg_spec_adv%input
        "configure_file_01"   .atparse. "@[CONF]/nmm_conf/nmm_@[GBRG]_conf.IN"
        "model_configure"        .copy. "configure_file_01"
        'restart_file_01'        .copy. "@[plat%INPUTS]/NMMB_reg_spec_adv/nmmb_rst_01_bin_0012h_00m_00.00s"
        'restart_file_01_nemsio' .copy. "@[plat%INPUTS]/NMMB_reg_spec_adv/nmmb_rst_01_nio_0012h_00m_00.00s"
    }
    criteria output {
        'nmmb_hst_01_bin_0024h_00m_00.00s' .bitcmp. "@[CNTL]"
        'nmmb_hst_01_nio_0024h_00m_00.00s' .bitcmp. "@[CNTL]"
    }
}

test nmm_reg_wsm6_gfdl: nmm.x {
    use nmm_reg_ctl
    TEST_DESCR="Test NMMB-regional with physics schemes WSM6 and GFDL"
    CNTL_NAME='NMMB_reg_wsm6_gfdl'
    WPREC='false'
    MICRO='wsm6'
    RADTN='gfdl'
    criteria output {
        'nmmb_hst_01_bin_0000h_00m_00.00s' .bitcmp. "@[CNTL]"
        'nmmb_hst_01_bin_0024h_00m_00.00s' .bitcmp. "@[CNTL]"
        'nmmb_hst_01_nio_0000h_00m_00.00s' .bitcmp. "@[CNTL]"
        'nmmb_hst_01_nio_0024h_00m_00.00s' .bitcmp. "@[CNTL]"
        'nmmb_rst_01_bin_0012h_00m_00.00s' .bitcmp. "@[CNTL]"
        'nmmb_rst_01_nio_0012h_00m_00.00s' .bitcmp. "@[CNTL]"
    }
}

test nmm_reg_wsm6_rrtm: nmm.x {
    use nmm_reg_wsm6_gfdl
    TEST_DESC="Test NMMB-regional with physics schemes WSM6 and RRTM"
    CNTL_NAME='NMMB_reg_wsm6_rrtm'
    RADTN='rrtm'
    criteria output {
        'nmmb_hst_01_bin_0000h_00m_00.00s' .bitcmp. "@[CNTL]"
        'nmmb_hst_01_bin_0024h_00m_00.00s' .bitcmp. "@[CNTL]"
        'nmmb_hst_01_nio_0000h_00m_00.00s' .bitcmp. "@[CNTL]"
        'nmmb_hst_01_nio_0024h_00m_00.00s' .bitcmp. "@[CNTL]"
        'nmmb_rst_01_bin_0012h_00m_00.00s' .bitcmp. "@[CNTL]"
        'nmmb_rst_01_nio_0012h_00m_00.00s' .bitcmp. "@[CNTL]"
    }
}

test nmm_reg_sas_zhao: nmm.x {
    use nmm_reg_ctl
    TEST_DESCR="Test NMMB-regional with physics schemes SAS, ZHAO"
    CNTL_NAME='NMMB_reg_sas_zhao'
    WPREC='false'
    FCSTL='24'
    CONVC='sas'
    MICRO='gfs'
    criteria output {
        'nmmb_hst_01_bin_0000h_00m_00.00s' .bitcmp. "@[CNTL]"
        'nmmb_hst_01_bin_0024h_00m_00.00s' .bitcmp. "@[CNTL]"
        'nmmb_hst_01_nio_0000h_00m_00.00s' .bitcmp. "@[CNTL]"
        'nmmb_hst_01_nio_0024h_00m_00.00s' .bitcmp. "@[CNTL]"
        'nmmb_rst_01_bin_0012h_00m_00.00s' .bitcmp. "@[CNTL]"
        'nmmb_rst_01_nio_0012h_00m_00.00s' .bitcmp. "@[CNTL]"
    }
}

test nmm_reg_thomp: nmm.x {
    use nmm_reg_ctl
    TEST_DESCR="Test NMMB-regional with THOMPSON microphysics scheme"
    CNTL_NAME='NMMB_reg_thomp'
    WPREC='false'
    FCSTL='24'
    MICRO='thompson'
    SPEC_ADV='true'
    NP3D='8'
    criteria output {
        'nmmb_hst_01_bin_0000h_00m_00.00s' .bitcmp. "@[CNTL]"
        'nmmb_hst_01_bin_0024h_00m_00.00s' .bitcmp. "@[CNTL]"
        'nmmb_hst_01_nio_0000h_00m_00.00s' .bitcmp. "@[CNTL]"
        'nmmb_hst_01_nio_0024h_00m_00.00s' .bitcmp. "@[CNTL]"
        'nmmb_rst_01_bin_0012h_00m_00.00s' .bitcmp. "@[CNTL]"
        'nmmb_rst_01_nio_0012h_00m_00.00s' .bitcmp. "@[CNTL]"
    }
}

test nmm_reg_hur: nmm.x {
    use nmm_reg_ctl
    TEST_DESCR="Test NMMB-regional with 2014 HWRF physics"
    CNTL_NAME='NMMB_reg_hur'
    WPREC='false'
    FCSTL='24'
    TURBL='gfsedmfhur'
    CONVC='scalecu'
    MICRO='fer_hires'
    RADTN='gfdl'
    SFC_LAYER='gfdl'
    LAND_SURFACE='noah'
    criteria output {
        'nmmb_hst_01_bin_0000h_00m_00.00s' .bitcmp. "@[CNTL]"
        'nmmb_hst_01_bin_0024h_00m_00.00s' .bitcmp. "@[CNTL]"
        'nmmb_hst_01_nio_0000h_00m_00.00s' .bitcmp. "@[CNTL]"
        'nmmb_hst_01_nio_0024h_00m_00.00s' .bitcmp. "@[CNTL]"
        'nmmb_rst_01_bin_0012h_00m_00.00s' .bitcmp. "@[CNTL]"
        'nmmb_rst_01_nio_0012h_00m_00.00s' .bitcmp. "@[CNTL]"
    }
}

test nmm_reg_pcpadj: nmm.x, nmm_reg_ctl {
    use nmm_reg_ctl
    TEST_DESCR="Test NMMB-regional with precipitation adjustment on"
    WPREC='false'
    FCSTL='12'
    PCPFLG='true'
    CNTL_NAME='NMMB_reg_pcpadj'
    filters input {
        use nmm_reg_ctl%input
        'pcp.hr*'     .copydir.     "../nmm_reg_ctl"
        # Need to redo these with different settings:
     "configure_file_01"   .atparse. "@[CONF]/nmm_conf/nmm_@[GBRG]_conf.IN"
     "nems.configure"      .atparse. "@[CONF]/nems.configure.@[nems_configure].IN"
     "atmos.configure"     .atparse. "@[CONF]/atmos.configure_nmm"
    }
    criteria output {
        'nmmb_hst_01_bin_0000h_00m_00.00s' .bitcmp. "@[CNTL]"
        'nmmb_hst_01_bin_0012h_00m_00.00s' .bitcmp. "@[CNTL]"
        'nmmb_hst_01_nio_0000h_00m_00.00s' .bitcmp. "@[CNTL]"
        'nmmb_hst_01_nio_0012h_00m_00.00s' .bitcmp. "@[CNTL]"
        'nmmb_rst_01_bin_0012h_00m_00.00s' .bitcmp. "@[CNTL]"
        'nmmb_rst_01_nio_0012h_00m_00.00s' .bitcmp. "@[CNTL]"
    }
}

test nmm_reg_timesr: nmm.x {
    use nmm_reg_ctl
    TEST_DESCR="Test NMMB-regional writing time series"
    CNTL_NAME="NMMB_reg_timesr"
    TS='true'
    WPREC='false'
    FCSTL='06'
    filters input {
        use nmm_reg_ctl%input
        # work file         operation   input file
        "ts_locations.nml"   .copy.  "@[plat%PARMnems]/ts_locations.nml"
        # Need to redo these with different settings:
     "configure_file_01"   .atparse. "@[CONF]/nmm_conf/nmm_@[GBRG]_conf.IN"
     "nems.configure"      .atparse. "@[CONF]/nems.configure.@[nems_configure].IN"
     "atmos.configure"     .atparse. "@[CONF]/atmos.configure_nmm"
    }
    criteria output {
        #    NEMS.x output file --------- comparison - control file or dir
        'nmmb_hst_01_bin_0006h_00m_00.00s' .bitcmp. "@[CNTL]"
        'ts_p01_d01.bin'                   .bitcmp. "@[CNTL]"
        'ts_p02_d01.bin'                   .bitcmp. "@[CNTL]"
    }
}

# NMM NESTS ------------------------------------------------------------

test nmm_nests: nmm.x {
    use nmm_vars_nests
    FCSTL=24
    NCHILD='02'

    # Convenience variables:
    RUNDIR_ROOT="@[plat%TMPrt]"
    RUNDIR="@[RUNDIR_ROOT]/@[TEST_NAME]"
    TEST_DESCR="Test NMMB-regional with static nests"
    CNTL="@[plat%BASELINE]/@[CNTL_NAME]"      # Control baseline area
    TEST_IN="@[plat%INPUTS]/@[CNTL_NAME]"   # Test-specific input data
    COM="@[plat%COMrt]/@[TEST_NAME]"

    # The prep is run at the top of any job.  It should do such things
    # like making directories and loading modules.
    prep=nems_regtest_prep(RUNDIR="@[RUNDIR]",modules="@[nmm.x%modules.nems]",
                           CNTL="@[CNTL]")

    # The execute step runs the program:
    spawn execute {
        { "@[nmm.x%NEMS.x]", ranks="@[TASKS]", threads="@[OpenMPThreads]" }
    }

    filters input {
        # work file         operation   input file
     "input_domain_01"        .copy. "@[TEST_IN]/input_nmmb_regional.d01"
     "input_domain_01_nemsio" .copy. "@[TEST_IN]/input_nmmb_regional.d01_nemsio"
     "boco.*"              .copydir. "@[TEST_IN]"
     "GWD_bin_*"           .copydir. "@[TEST_IN]"

     "configure_file_01"   .atparse. "@[CONF]/nmm_conf/nmm_@[GBRG]_conf.IN"
     "configure_file_02"   .atparse. "@[CONF]/nmm_conf/nmm_@[GBRG]_conf_02.IN"
     "configure_file_03"   .atparse. "@[CONF]/nmm_conf/nmm_@[GBRG]_conf_03.IN"
     "configure_file_04"   .atparse. "@[CONF]/nmm_conf/nmm_@[GBRG]_conf_04.IN"
     "nems.configure"      .atparse. "@[CONF]/nems.configure.@[nems_configure].IN"
     "atmos.configure"     .atparse. "@[CONF]/atmos.configure_nmm"
     "model_configure"        .copy. "configure_file_01"

     "*"                   .copydir. "@[plat%NMM_DATA]"

     "VEGPARM.TBL"            .copy. "IGBP_VEGPARM.TBL"
     "LANDUSE.TBL"            .copy. "IGBP_LANDUSE.TBL"
     "ETAMPNEW_DATA"          .copy. "ETAMPNEW_DATA.expanded_rain"
     "fort.28"                .link. "global_o3prdlos.f77"
     "fort.48"                .link. "global_o3clim.txt"

     "solver_state.txt"       .copy. "@[plat%PARMnems]/solver_state.txt"
     "nests.txt"              .copy. "@[plat%PARMnems]/nests.txt"
    }

    criteria output {
        #    NEMS.x output file --------- comparison - control file or dir
        'nmmb_hst_01_bin_0000h_00m_00.00s' .bitcmp. "@[CNTL]"
        'nmmb_hst_01_bin_0024h_00m_00.00s' .bitcmp. "@[CNTL]"
        'nmmb_hst_01_nio_0000h_00m_00.00s' .bitcmp. "@[CNTL]"
        'nmmb_hst_01_nio_0024h_00m_00.00s' .bitcmp. "@[CNTL]"
        'nmmb_rst_01_bin_0012h_00m_00.00s' .bitcmp. "@[CNTL]"
        'nmmb_rst_01_nio_0012h_00m_00.00s' .bitcmp. "@[CNTL]"
        'nmmb_hst_02_bin_0000h_00m_00.00s' .bitcmp. "@[CNTL]"
        'nmmb_hst_02_bin_0024h_00m_00.00s' .bitcmp. "@[CNTL]"
        'nmmb_hst_02_nio_0000h_00m_00.00s' .bitcmp. "@[CNTL]"
        'nmmb_hst_02_nio_0024h_00m_00.00s' .bitcmp. "@[CNTL]"
        'nmmb_rst_02_bin_0012h_00m_00.00s' .bitcmp. "@[CNTL]"
        'nmmb_rst_02_nio_0012h_00m_00.00s' .bitcmp. "@[CNTL]"
        'nmmb_hst_03_bin_0000h_00m_00.00s' .bitcmp. "@[CNTL]"
        'nmmb_hst_03_bin_0024h_00m_00.00s' .bitcmp. "@[CNTL]"
        'nmmb_hst_03_nio_0000h_00m_00.00s' .bitcmp. "@[CNTL]"
        'nmmb_hst_03_nio_0024h_00m_00.00s' .bitcmp. "@[CNTL]"
        'nmmb_rst_03_bin_0012h_00m_00.00s' .bitcmp. "@[CNTL]"
        'nmmb_rst_03_nio_0012h_00m_00.00s' .bitcmp. "@[CNTL]"
        'nmmb_hst_04_bin_0000h_00m_00.00s' .bitcmp. "@[CNTL]"
        'nmmb_hst_04_bin_0024h_00m_00.00s' .bitcmp. "@[CNTL]"
        'nmmb_hst_04_nio_0000h_00m_00.00s' .bitcmp. "@[CNTL]"
        'nmmb_hst_04_nio_0024h_00m_00.00s' .bitcmp. "@[CNTL]"
        'nmmb_rst_04_bin_0012h_00m_00.00s' .bitcmp. "@[CNTL]"
        'nmmb_rst_04_nio_0012h_00m_00.00s' .bitcmp. "@[CNTL]"
    }
}

test nmm_nest_rest: nmm_nests, nmm.x {
    use nmm_nests
    FCSTL=24
    NCHILD='02'
    RSTRT='true'
    TEST_DESCR="Test NMMB-regional static nests with restart"

    filters input {
        use nmm_nests%input
        "restart_file_01"        .copy. "@[TEST_IN]/nmmb_rst_01_bin_0012h_00m_00.00s"
        "restart_file_02"        .copy. "@[TEST_IN]/nmmb_rst_02_bin_0012h_00m_00.00s"
        "restart_file_03"        .copy. "@[TEST_IN]/nmmb_rst_03_bin_0012h_00m_00.00s"
        "restart_file_04"        .copy. "@[TEST_IN]/nmmb_rst_04_bin_0012h_00m_00.00s"
    }

    criteria output {
        'nmmb_hst_01_bin_0024h_00m_00.00s' .bitcmp. "@[CNTL]"
        'nmmb_hst_01_nio_0024h_00m_00.00s' .bitcmp. "@[CNTL]"
        'nmmb_hst_02_bin_0024h_00m_00.00s' .bitcmp. "@[CNTL]"
        'nmmb_hst_02_nio_0024h_00m_00.00s' .bitcmp. "@[CNTL]"
        'nmmb_hst_03_bin_0024h_00m_00.00s' .bitcmp. "@[CNTL]"
        'nmmb_hst_03_nio_0024h_00m_00.00s' .bitcmp. "@[CNTL]"
        'nmmb_hst_04_bin_0024h_00m_00.00s' .bitcmp. "@[CNTL]"
        'nmmb_hst_04_nio_0024h_00m_00.00s' .bitcmp. "@[CNTL]"
    }
}

# NMM DIGITAL FILTERING ------------------------------------------------

test nmm_reg_filt: nmm.x {
    use nmm_vars_fltr

    FCSTL='03'
    NEMSI='true'
    NCHILD='01'

    # Convenience variables:
    RUNDIR_ROOT="@[plat%TMPrt]"
    RUNDIR="@[RUNDIR_ROOT]/@[TEST_NAME]"
    TEST_DESCR="Test NMMB-regional digital filter with static nests"
    CNTL="@[plat%BASELINE]/@[CNTL_NAME]"      # Control baseline area
    NEST_IN="@[plat%INPUTS]/NMMB_nests"       # NMM nesting input files
    FILT_IN="@[plat%INPUTS]/NMMB_reg_filt"    # NMM filtering input files
    COM="@[plat%COMrt]/@[TEST_NAME]"

    # The prep is run at the top of any job.  It should do such things
    # like making directories and loading modules.
    prep=nems_regtest_prep(
        RUNDIR="@[RUNDIR]",modules="@[nmm.x%modules.nems]",
        CNTL="@[CNTL]")

    # The execute step runs the program:
    spawn execute {
        { "@[nmm.x%NEMS.x]", ranks="@[TASKS]", threads="@[OpenMPThreads]" }
    }

    filters input {
        'input_domain_01'          .copy. "@[NEST_IN]/input_nmmb_regional.d01"
        'input_domain_01_nemsio'   .copy. "@[NEST_IN]/input_nmmb_regional.d01_nemsio"
        'boco*'                 .copydir. "@[NEST_IN]"
        '*'                     .copydir. "@[plat%NMM_DATA]"
        'GWD_bin_*'             .copydir. "@[FILT_IN]"
        'VEGPARM.TBL'              .copy. 'IGBP_VEGPARM.TBL'
        'LANDUSE.TBL'              .copy. 'IGBP_LANDUSE.TBL'
        'ETAMPNEW_DATA'            .copy. 'ETAMPNEW_DATA.expanded_rain'

        "configure_file_01"     .atparse. "@[CONF]/nmm_conf/nmm_@[GBRG]_conf.IN"
        "nems.configure"        .atparse. "@[CONF]/nems.configure.@[nems_configure].IN"
        "atmos.configure"       .atparse. "@[CONF]/atmos.configure_nmm"
        "model_configure"          .copy. "configure_file_01"
        
        'configure_file_02'        .copy. "@[CONF]/nmm_conf/nmm_fltr_conf_02"
        'configure_file_03'        .copy. "@[CONF]/nmm_conf/nmm_fltr_conf_03"

        "fort.28"                  .link. "global_o3prdlos.f77"
        "fort.48"                  .link. "global_o3clim.txt"
        "solver_state.txt"         .copy. "@[plat%PARMnems]/solver_state.txt"
        "filt_vars.txt"            .copy. "@[plat%PARMnems]/filt_vars.txt"
        "nests.txt"                .copy. "@[plat%PARMnems]/nests.txt"
    }

    criteria output {
        'nmmb_hst_01_bin_0003h_00m_00.00s' .bitcmp. "@[CNTL]"
        'nmmb_hst_01_nio_0003h_00m_00.00s' .bitcmp. "@[CNTL]"
        'nmmb_hst_02_bin_0003h_00m_00.00s' .bitcmp. "@[CNTL]"
        'nmmb_hst_02_nio_0003h_00m_00.00s' .bitcmp. "@[CNTL]"
        'nmmb_hst_03_bin_0003h_00m_00.00s' .bitcmp. "@[CNTL]"
        'nmmb_hst_03_nio_0003h_00m_00.00s' .bitcmp. "@[CNTL]"
    }
}

test nmm_reg_filt_zombie: nmm.x {
    use nmm_reg_filt
    GBRG='fltr_zombie'
    CNTL_NAME='NMMB_reg_filt_zombie'
    TEST_DESCR="Test NMMB-regional digital filter with zombie grandchild"
    criteria output {
        'nmmb_hst_01_bin_0003h_00m_00.00s' .bitcmp. "@[CNTL]"
        'nmmb_hst_01_nio_0003h_00m_00.00s' .bitcmp. "@[CNTL]"
        'nmmb_hst_02_bin_0003h_00m_00.00s' .bitcmp. "@[CNTL]"
        'nmmb_hst_02_nio_0003h_00m_00.00s' .bitcmp. "@[CNTL]"
        'nmmb_hst_03_bin_0003h_00m_00.00s' .bitcmp. "@[CNTL]"
        'nmmb_hst_03_nio_0003h_00m_00.00s' .bitcmp. "@[CNTL]"
    }
    filters input {
        use nmm_reg_filt%input
        'configure_file_03' .copy. "@[CONF]/nmm_conf/nmm_fltr_zombie_conf_03"
    }
}

# NMM MOVING NESTING TESTS ---------------------------------------------

test nmm_mvg_nests: nmm.x {
    use nmm_vars_mvg
    FCSTL='24'
    NCHILD='02'
    NEMSI='true'

    # Convenience variables:
    RUNDIR_ROOT="@[plat%TMPrt]"
    RUNDIR="@[RUNDIR_ROOT]/@[TEST_NAME]"
    TEST_DESCR="Test NMMB-regional with 2-way moving nests"
    CNTL="@[plat%BASELINE]/@[CNTL_NAME]"      # Control baseline area
    IN_MOVE="@[plat%INPUTS]/NMMB_mvg_nests"   # Moving nesting inputs
    IN_2WAY="@[plat%INPUTS]/NMMB_2way_nests"  # 2-way nesting inputs
    COM="@[plat%COMrt]/@[TEST_NAME]"

    # The prep is run at the top of any job.  It should do such things
    # like making directories and loading modules.
    prep=nems_regtest_prep(
        RUNDIR="@[RUNDIR]",modules="@[nmm.x%modules.nems]",
        CNTL="@[CNTL]")

    # The execute step runs the program:
    spawn execute {
        { "@[nmm.x%NEMS.x]", ranks="@[TASKS]", threads="@[OpenMPThreads]" }
    }

    filters input {
        # work file           operation  input file
        'input_domain_01_nemsio' .copy. "@[IN_MOVE]/input_domain_01_nemsio"
        'input_domain_02_nemsio' .copy. "@[IN_MOVE]/input_domain_02_nemsio"
        'input_domain_03_nemsio' .copy. "@[IN_MOVE]/input_domain_03_nemsio"
        'input_domain_04_nemsio' .copy. "@[IN_MOVE]/input_domain_04_nemsio"
        'boco.*'              .copydir. "@[IN_MOVE]/"
        '*'                   .copydir. "@[plat%NMM_DATA]/"
        'GWD_bin_*'           .copydir. "@[IN_MOVE]/"
        '*_3.nc'              .copydir. "@[IN_MOVE]/"
        '*_9.nc'              .copydir. "@[IN_MOVE]/"
        'VEGPARM.TBL'            .copy. "IGBP_VEGPARM.TBL"
        'LANDUSE.TBL'            .copy. "IGBP_LANDUSE.TBL"
        'ETAMPNEW_DATA'          .copy. "ETAMPNEW_DATA.expanded_rain"

        "configure_file_01"   .atparse. "@[CONF]/nmm_conf/nmm_@[GBRG]_conf.IN"
        "configure_file_02"   .atparse. "@[CONF]/nmm_conf/nmm_@[GBRG]_conf_02.IN"
        "configure_file_03"   .atparse. "@[CONF]/nmm_conf/nmm_@[GBRG]_conf_03.IN"
        "configure_file_04"   .atparse. "@[CONF]/nmm_conf/nmm_@[GBRG]_conf_04.IN"
        "nems.configure"      .atparse. "@[CONF]/nems.configure.@[nems_configure].IN"
        "atmos.configure"     .atparse. "@[CONF]/atmos.configure_nmm"
        "model_configure"        .copy. "configure_file_01"
        "fort.28"                .link. "global_o3prdlos.f77"
        "fort.48"                .link. "global_o3clim.txt"

        "solver_state.txt"       .copy. "@[plat%PARMnems]/solver_state.txt"
        "nests.txt"              .copy. "@[plat%PARMnems]/nests.txt"
    }

    criteria output {
        'nmmb_hst_01_bin_0000h_00m_00.00s' .bitcmp. "@[CNTL]"
        'nmmb_hst_01_bin_0024h_00m_00.00s' .bitcmp. "@[CNTL]"
        'nmmb_hst_01_nio_0000h_00m_00.00s' .bitcmp. "@[CNTL]"
        'nmmb_hst_01_nio_0024h_00m_00.00s' .bitcmp. "@[CNTL]"
        'nmmb_rst_01_bin_0012h_00m_00.00s' .bitcmp. "@[CNTL]"
        'nmmb_rst_01_nio_0012h_00m_00.00s' .bitcmp. "@[CNTL]"
        'nmmb_hst_02_bin_0000h_00m_00.00s' .bitcmp. "@[CNTL]"
        'nmmb_hst_02_bin_0024h_00m_00.00s' .bitcmp. "@[CNTL]"
        'nmmb_hst_02_nio_0000h_00m_00.00s' .bitcmp. "@[CNTL]"
        'nmmb_hst_02_nio_0024h_00m_00.00s' .bitcmp. "@[CNTL]"
        'nmmb_rst_02_bin_0012h_00m_00.00s' .bitcmp. "@[CNTL]"
        'nmmb_rst_02_nio_0012h_00m_00.00s' .bitcmp. "@[CNTL]"
        'nmmb_hst_03_bin_0000h_00m_00.00s' .bitcmp. "@[CNTL]"
        'nmmb_hst_03_bin_0024h_00m_00.00s' .bitcmp. "@[CNTL]"
        'nmmb_hst_03_nio_0000h_00m_00.00s' .bitcmp. "@[CNTL]"
        'nmmb_hst_03_nio_0024h_00m_00.00s' .bitcmp. "@[CNTL]"
        'nmmb_rst_03_bin_0012h_00m_00.00s' .bitcmp. "@[CNTL]"
        'nmmb_rst_03_nio_0012h_00m_00.00s' .bitcmp. "@[CNTL]"
        'nmmb_hst_04_bin_0000h_00m_00.00s' .bitcmp. "@[CNTL]"
        'nmmb_hst_04_bin_0024h_00m_00.00s' .bitcmp. "@[CNTL]"
        'nmmb_hst_04_nio_0000h_00m_00.00s' .bitcmp. "@[CNTL]"
        'nmmb_hst_04_nio_0024h_00m_00.00s' .bitcmp. "@[CNTL]"
        'nmmb_rst_04_bin_0012h_00m_00.00s' .bitcmp. "@[CNTL]"
        'nmmb_rst_04_nio_0012h_00m_00.00s' .bitcmp. "@[CNTL]"
    }
}

test nmm_mvg_nests_restart: nmm_mvg_nests, nmm.x {
    use nmm_mvg_nests
    TEST_DESCR="Test NMMB-regional with moving nests - RESTART"
    RSTRT='true'
    filters input {
        use nmm_mvg_nests%input
        'restart_file_01'        .copy. "@[IN_MOVE]/nmmb_rst_01_bin_0012h_00m_00.00s"
        'restart_file_01_nemsio' .copy. "@[IN_MOVE]/nmmb_rst_01_nio_0012h_00m_00.00s"
        'restart_file_02'        .copy. "@[IN_MOVE]/nmmb_rst_02_bin_0012h_00m_00.00s"
        'restart_file_02_nemsio' .copy. "@[IN_MOVE]/nmmb_rst_02_nio_0012h_00m_00.00s"
        'restart_file_03'        .copy. "@[IN_MOVE]/nmmb_rst_03_bin_0012h_00m_00.00s"
        'restart_file_03_nemsio' .copy. "@[IN_MOVE]/nmmb_rst_03_nio_0012h_00m_00.00s"
        'restart_file_04'        .copy. "@[IN_MOVE]/nmmb_rst_04_bin_0012h_00m_00.00s"
        'restart_file_04_nemsio' .copy. "@[IN_MOVE]/nmmb_rst_04_nio_0012h_00m_00.00s"
    }
    criteria output {
        'nmmb_hst_01_bin_0024h_00m_00.00s' .bitcmp. "@[CNTL]"
        'nmmb_hst_01_nio_0024h_00m_00.00s' .bitcmp. "@[CNTL]"
        'nmmb_hst_02_bin_0024h_00m_00.00s' .bitcmp. "@[CNTL]"
        'nmmb_hst_02_nio_0024h_00m_00.00s' .bitcmp. "@[CNTL]"
        'nmmb_hst_03_bin_0024h_00m_00.00s' .bitcmp. "@[CNTL]"
        'nmmb_hst_03_nio_0024h_00m_00.00s' .bitcmp. "@[CNTL]"
        'nmmb_hst_04_bin_0024h_00m_00.00s' .bitcmp. "@[CNTL]"
        'nmmb_hst_04_nio_0024h_00m_00.00s' .bitcmp. "@[CNTL]"
    }
}

test nmm_mvg_nests_gens: nmm.x {
    use nmm_mvg_nests
    use plat%nmm_mvg2
    TEST_DESCR="Test NMMB-regional with 1-way moving nests and generational task assignments"
    MODE='2-way'
    filters input {
        use nmm_mvg_nests%input
        'configure_file_02' .atparse. "@[CONF]/nmm_conf/nmm_mnests_2way_conf_02.IN"
        'configure_file_03' .atparse. "@[CONF]/nmm_conf/nmm_mnests_2way_conf_03.IN"
        'configure_file_04' .atparse. "@[CONF]/nmm_conf/nmm_mnests_2way_conf_04.IN"

        # Need to regenerate these due to nmm_mvg2:
        "configure_file_01" .atparse. "@[CONF]/nmm_conf/nmm_@[GBRG]_conf.IN"
        "nems.configure"    .atparse. "@[CONF]/nems.configure.@[nems_configure].IN"
        "atmos.configure"   .atparse. "@[CONF]/atmos.configure_nmm"
        "model_configure"      .copy. "configure_file_01"
    }
    criteria output {
        'nmmb_hst_01_bin_0024h_00m_00.00s' .bitcmp. "@[CNTL]"
        'nmmb_hst_01_nio_0024h_00m_00.00s' .bitcmp. "@[CNTL]"
        'nmmb_hst_02_bin_0024h_00m_00.00s' .bitcmp. "@[CNTL]"
        'nmmb_hst_02_nio_0024h_00m_00.00s' .bitcmp. "@[CNTL]"
        'nmmb_hst_03_bin_0024h_00m_00.00s' .bitcmp. "@[CNTL]"
        'nmmb_hst_03_nio_0024h_00m_00.00s' .bitcmp. "@[CNTL]"
        'nmmb_hst_04_bin_0024h_00m_00.00s' .bitcmp. "@[CNTL]"
        'nmmb_hst_04_nio_0024h_00m_00.00s' .bitcmp. "@[CNTL]"
    }
}

# NMM 2-WAY STATIONARY NEST TESTS --------------------------------------

test nmm_2way_nests: nmm.x {
    use nmm_vars_2way
    FCSTL=24
    NCHILD='02'
    NEMSI='true'
    MODE='2-way'
    WGT='1.0'

    # Convenience variables:
    RUNDIR_ROOT="@[plat%TMPrt]"
    RUNDIR="@[RUNDIR_ROOT]/@[TEST_NAME]"
    TEST_DESCR="Test NMMB-regional with 2-way moving nests"
    CNTL="@[plat%BASELINE]/@[CNTL_NAME]"      # Control baseline area
    IN_MOVE="@[plat%INPUTS]/NMMB_mvg_nests"   # Moving nesting inputs
    IN_2WAY="@[plat%INPUTS]/NMMB_2way_nests"  # 2-way nesting inputs
    COM="@[plat%COMrt]/@[TEST_NAME]"          # Path to test output area

    # The prep is run at the top of any job.  It should do such things
    # like making directories and loading modules.
    prep=nems_regtest_prep(
        RUNDIR="@[RUNDIR]",modules="@[nmm.x%modules.nems]",
        CNTL="@[CNTL]")

    # The execute step runs the program:
    spawn execute {
        { "@[nmm.x%NEMS.x]", ranks="@[TASKS]", threads="@[OpenMPThreads]" }
    }

    filters input {
        # work file         operation   input file
     "input_domain_01_nemsio" .copy. "@[IN_MOVE]/input_domain_01_nemsio"
     "input_domain_02_nemsio" .copy. "@[IN_MOVE]/input_domain_02_nemsio"
     "input_domain_03_nemsio" .copy. "@[IN_MOVE]/input_domain_03_nemsio"
     "input_domain_04_nemsio" .copy. "@[IN_MOVE]/input_domain_04_nemsio"

     "boco.*"              .copydir. "@[IN_MOVE]"
     "*"                   .copydir. "@[plat%NMM_DATA]"
     "GWD_bin_*"           .copydir. "@[IN_MOVE]"
     "*_3.nc"              .copydir. "@[IN_MOVE]"
     "*_9.nc"              .copydir. "@[IN_MOVE]"

     "VEGPARM.TBL"            .copy. "IGBP_VEGPARM.TBL"
     "LANDUSE.TBL"            .copy. "IGBP_LANDUSE.TBL"
     "ETAMPNEW_DATA"          .copy. "ETAMPNEW_DATA.expanded_rain"
     "fort.28"                .link. "global_o3prdlos.f77"
     "fort.48"                .link. "global_o3clim.txt"

     "configure_file_01"   .atparse. "@[CONF]/nmm_conf/nmm_@[GBRG]_conf.IN"
     "configure_file_02"   .atparse. "@[CONF]/nmm_conf/nmm_@[GBRG]_conf_02.IN"
     "configure_file_03"   .atparse. "@[CONF]/nmm_conf/nmm_@[GBRG]_conf_03.IN"
     "configure_file_04"   .atparse. "@[CONF]/nmm_conf/nmm_@[GBRG]_conf_04.IN"
     "nems.configure"      .atparse. "@[CONF]/nems.configure.@[nems_configure].IN"
     "atmos.configure"     .atparse. "@[CONF]/atmos.configure_nmm"
     "model_configure"        .copy. "configure_file_01"

     "solver_state.txt"       .copy. "@[plat%PARMnems]/solver_state.txt"
     "nests.txt"              .copy. "@[plat%PARMnems]/nests.txt"
    }

    criteria output {
        #    NEMS.x output file --------- comparison - control file or dir
        'nmmb_hst_01_bin_0000h_00m_00.00s' .bitcmp. "@[CNTL]"
        'nmmb_hst_01_bin_0024h_00m_00.00s' .bitcmp. "@[CNTL]"
	'nmmb_hst_01_nio_0000h_00m_00.00s' .bitcmp. "@[CNTL]"
        'nmmb_hst_01_nio_0024h_00m_00.00s' .bitcmp. "@[CNTL]"
	'nmmb_rst_01_bin_0012h_00m_00.00s' .bitcmp. "@[CNTL]"
        'nmmb_rst_01_nio_0012h_00m_00.00s' .bitcmp. "@[CNTL]"
	'nmmb_hst_02_bin_0000h_00m_00.00s' .bitcmp. "@[CNTL]"
        'nmmb_hst_02_bin_0024h_00m_00.00s' .bitcmp. "@[CNTL]"
	'nmmb_hst_02_nio_0000h_00m_00.00s' .bitcmp. "@[CNTL]"
        'nmmb_hst_02_nio_0024h_00m_00.00s' .bitcmp. "@[CNTL]"
        'nmmb_rst_02_bin_0012h_00m_00.00s' .bitcmp. "@[CNTL]"
        'nmmb_rst_02_nio_0012h_00m_00.00s' .bitcmp. "@[CNTL]"
	'nmmb_hst_03_bin_0000h_00m_00.00s' .bitcmp. "@[CNTL]"
        'nmmb_hst_03_bin_0024h_00m_00.00s' .bitcmp. "@[CNTL]"
	'nmmb_hst_03_nio_0000h_00m_00.00s' .bitcmp. "@[CNTL]"
        'nmmb_hst_03_nio_0024h_00m_00.00s' .bitcmp. "@[CNTL]"
	'nmmb_rst_03_bin_0012h_00m_00.00s' .bitcmp. "@[CNTL]"
        'nmmb_rst_03_nio_0012h_00m_00.00s' .bitcmp. "@[CNTL]"
	'nmmb_hst_04_bin_0000h_00m_00.00s' .bitcmp. "@[CNTL]"
        'nmmb_hst_04_bin_0024h_00m_00.00s' .bitcmp. "@[CNTL]"
	'nmmb_hst_04_nio_0000h_00m_00.00s' .bitcmp. "@[CNTL]"
        'nmmb_hst_04_nio_0024h_00m_00.00s' .bitcmp. "@[CNTL]"
	'nmmb_rst_04_bin_0012h_00m_00.00s' .bitcmp. "@[CNTL]"
        'nmmb_rst_04_nio_0012h_00m_00.00s' .bitcmp. "@[CNTL]"
    }
}

test nmm_2way_nests_debug: nmm.debug.x {
    use nmm_2way_nests
    FCSTL=3
    TEST_DESCR="Test NMMB-regional with 2-way moving nests DEBUG"
    criteria output {}
}

test nmm_2way_nests_restart: nmm_2way_nests, nmm.x {
    use nmm_2way_nests
    RSTRT='true'
    TEST_DESCR="Test NMMB-regional with 2-way moving nests - RESTART"

    filters input {
        use nmm_2way_nests%input
        "restart_file_01"        .copy. "@[IN_2WAY]/nmmb_rst_01_bin_0012h_00m_00.00s"
        "restart_file_02"        .copy. "@[IN_2WAY]/nmmb_rst_02_bin_0012h_00m_00.00s"
        "restart_file_03"        .copy. "@[IN_2WAY]/nmmb_rst_03_bin_0012h_00m_00.00s"
        "restart_file_04"        .copy. "@[IN_2WAY]/nmmb_rst_04_bin_0012h_00m_00.00s"
        "restart_file_01_nemsio" .copy. "@[IN_2WAY]/nmmb_rst_01_nio_0012h_00m_00.00s"
        "restart_file_02_nemsio" .copy. "@[IN_2WAY]/nmmb_rst_02_nio_0012h_00m_00.00s"
        "restart_file_03_nemsio" .copy. "@[IN_2WAY]/nmmb_rst_03_nio_0012h_00m_00.00s"
        "restart_file_04_nemsio" .copy. "@[IN_2WAY]/nmmb_rst_04_nio_0012h_00m_00.00s"
    }
    
    criteria output {
        #    NEMS.x output file --------- comparison - control file or dir
        'nmmb_hst_01_bin_0024h_00m_00.00s' .bitcmp. "@[CNTL]"
        'nmmb_hst_01_nio_0024h_00m_00.00s' .bitcmp. "@[CNTL]"
        'nmmb_hst_02_bin_0024h_00m_00.00s' .bitcmp. "@[CNTL]"
        'nmmb_hst_02_nio_0024h_00m_00.00s' .bitcmp. "@[CNTL]"
        'nmmb_hst_03_bin_0024h_00m_00.00s' .bitcmp. "@[CNTL]"
        'nmmb_hst_03_nio_0024h_00m_00.00s' .bitcmp. "@[CNTL]"
        'nmmb_hst_04_nio_0024h_00m_00.00s' .bitcmp. "@[CNTL]"
    }
}
