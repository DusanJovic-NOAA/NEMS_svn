!  $Id: MAPL_Comms.P90,v 1.10 2009/02/23 20:03:29 trayanov Exp $

#include "MAPL_ErrLog.h"

!BOP

! !MODULE: MAPL_Comms -- A Module to parallel comunications until ESMF fully supports it


! !INTERFACE:

module MAPL_CommsMod

  use ESMF_Mod
  use MAPL_BaseMod
  use MAPL_ConstantsMod
  implicit none
  private

  public MAPL_Abort
  public MAPL_CommsBcast
  public MAPL_CommsScatterV
  public MAPL_CommsGatherV
  public MAPL_CommsAllGather
  public MAPL_CommsAllGatherV
  public MAPL_CommsAllReduceMin
  public MAPL_CommsAllReduceMax
  public MAPL_CommsAllReduceSum
  public MAPL_CommsSend
  public MAPL_CommsRecv
  public MAPL_CommsSendRecv
  public MAPL_AM_I_ROOT
  public MAPL_NPES
  public ArrayGather
  public ArrayScatter

  public MAPL_root

  interface MAPL_Am_I_Root
     module procedure MAPL_Am_I_Root_Layout
     module procedure MAPL_Am_I_Root_Vm
  end interface

  interface MAPL_NPES
     module procedure MAPL_NPES_Layout
     module procedure MAPL_NPES_Vm
  end interface

  interface MAPL_CommsBcast
     module procedure MAPL_CommsBcast_STRING_0
     module procedure MAPL_CommsBcast_I4_0
     module procedure MAPL_CommsBcast_R4_0
     module procedure MAPL_CommsBcast_R8_0
     module procedure MAPL_CommsBcast_I4_1
     module procedure MAPL_CommsBcast_R4_1
     module procedure MAPL_CommsBcast_R8_1
     module procedure MAPL_CommsBcast_I4_2
     module procedure MAPL_CommsBcast_R4_2
     module procedure MAPL_CommsBcast_R8_2
  end interface

  interface MAPL_CommsScatterV
     module procedure MAPL_CommsScatterV_R4_1
     module procedure MAPL_CommsScatterV_R4_2
     module procedure MAPL_CommsScatterV_R8_1
     module procedure MAPL_CommsScatterV_R8_2
  end interface

  interface MAPL_CommsGatherV
     module procedure MAPL_CommsGatherV_I4_1
     module procedure MAPL_CommsGatherV_R4_1
     module procedure MAPL_CommsGatherV_R4_2
     module procedure MAPL_CommsGatherV_R8_1
     module procedure MAPL_CommsGatherV_R8_2
  end interface

  interface MAPL_CommsAllGather
     module procedure MAPL_CommsAllGather_I4_1
     module procedure MAPL_CommsAllGather_L4_1
  end interface

  interface MAPL_CommsAllGatherV
     module procedure MAPL_CommsAllGatherV_I4_1
     module procedure MAPL_CommsAllGatherV_R4_1
  end interface

  interface MAPL_CommsAllReduceMin
     module procedure MAPL_CommsAllReduceMin_I4_0
     module procedure MAPL_CommsAllReduceMin_R4_0
     module procedure MAPL_CommsAllReduceMin_R8_0
     module procedure MAPL_CommsAllReduceMin_I4_1
     module procedure MAPL_CommsAllReduceMin_R4_1
     module procedure MAPL_CommsAllReduceMin_R8_1
     module procedure MAPL_CommsAllReduceMin_I4_2
     module procedure MAPL_CommsAllReduceMin_R4_2
     module procedure MAPL_CommsAllReduceMin_R8_2
  end interface

  interface MAPL_CommsAllReduceMax
     module procedure MAPL_CommsAllReduceMax_I4_0
     module procedure MAPL_CommsAllReduceMax_R4_0
     module procedure MAPL_CommsAllReduceMax_R8_0
     module procedure MAPL_CommsAllReduceMax_I4_1
     module procedure MAPL_CommsAllReduceMax_R4_1
     module procedure MAPL_CommsAllReduceMax_R8_1
     module procedure MAPL_CommsAllReduceMax_I4_2
     module procedure MAPL_CommsAllReduceMax_R4_2
     module procedure MAPL_CommsAllReduceMax_R8_2
  end interface

  interface MAPL_CommsAllReduceSum
     module procedure MAPL_CommsAllReduceSum_I4_0
     module procedure MAPL_CommsAllReduceSum_R4_0
     module procedure MAPL_CommsAllReduceSum_R8_0
     module procedure MAPL_CommsAllReduceSum_I4_1
     module procedure MAPL_CommsAllReduceSum_R4_1
     module procedure MAPL_CommsAllReduceSum_R8_1
     module procedure MAPL_CommsAllReduceSum_I4_2
     module procedure MAPL_CommsAllReduceSum_R4_2
     module procedure MAPL_CommsAllReduceSum_R8_2
  end interface

  interface MAPL_CommsSend
     module procedure MAPL_CommsSend_I4_0
     module procedure MAPL_CommsSend_I4_1
     module procedure MAPL_CommsSend_R4_1
     module procedure MAPL_CommsSend_R4_2
     module procedure MAPL_CommsSend_R8_1
     module procedure MAPL_CommsSend_R8_2
  end interface

  interface MAPL_CommsRecv
     module procedure MAPL_CommsRecv_I4_0
     module procedure MAPL_CommsRecv_I4_1
     module procedure MAPL_CommsRecv_R4_1
     module procedure MAPL_CommsRecv_R4_2
     module procedure MAPL_CommsRecv_R8_1
     module procedure MAPL_CommsRecv_R8_2
  end interface

  interface MAPL_CommsSendRecv
     module procedure MAPL_CommsSendRecv_I4_0
     module procedure MAPL_CommsSendRecv_R4_1
     module procedure MAPL_CommsSendRecv_R4_2
     module procedure MAPL_CommsSendRecv_R8_1
     module procedure MAPL_CommsSendRecv_R8_2
  end interface

  interface ArrayScatter
     module procedure ArrayScatter_R4_1
     module procedure ArrayScatter_R8_1
     module procedure ArrayScatter_R4_2
     module procedure ArrayScatter_R8_2
  end interface

  interface ArrayGather
     module procedure ArrayGather_I4_1
     module procedure ArrayGather_R4_1
     module procedure ArrayGather_R8_1
     module procedure ArrayGather_R4_2
     module procedure ArrayGather_R8_2
  end interface

  include "mpif.h"

  integer, parameter :: MAPL_root=0
  integer, parameter :: msg_tag=11

  contains

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

!---------------------------
!---------------------------
!---------------------------
  function MAPL_Am_I_Root_Vm(VM) result(R)
    type (ESMF_VM) :: VM
    logical        :: R

    integer       :: deId
    integer       :: status

    R = .false.
    call ESMF_VMGet(vm, localPet=deId, rc=status)
    if (deId == MAPL_Root) R = .true.

  end function MAPL_Am_I_Root_Vm

  function MAPL_Am_I_Root_Layout(layout) result(R)
    type (ESMF_DELayout), optional :: layout
    logical                        :: R

    integer       :: deId
    integer       :: status
    type(ESMF_VM) :: vm
    integer       :: deList(1)

    R = .false.
    if (present(layout)) then
!       call ESMF_DELayoutGet(layout, localDeCount=ldecount, rc=status)
       call ESMF_DELayoutGet(layout, localDeList=deList, rc=status)
    else
       call ESMF_VMGetCurrent(vm, rc=status)
       R = MAPL_Am_I_Root(vm)
       return
    end if
    if (deList(1) == MAPL_Root) R = .true.

  end function MAPL_Am_I_Root_Layout


!---------------------------
!---------------------------
!---------------------------
  function MAPL_NPES_Vm(VM) result(R)
    type (ESMF_VM) :: VM
    integer        :: R

    integer       :: petCnt
    integer       :: status

    call ESMF_VMGet(vm, petCount=petCnt, rc=status)
    R = petCnt

    return
  end function MAPL_NPES_Vm

  function MAPL_NPES_Layout(layout) result(R)
    type (ESMF_DELayout), optional :: layout
    integer                        :: R

    integer       :: petCnt
    integer       :: status
    type(ESMF_VM) :: vm
    integer       :: deList(1)

    call ESMF_DELayoutGet(layout, vm=vm, rc=status)
    R = MAPL_NPES_Vm(vm)

    return
  end function MAPL_NPES_Layout



!--BCAST -----------------

! Rank 0
!---------------------------
#define RANK_ 0
#define VARTYPE_ 0
#include "bcast.H"

!---------------------------
#define RANK_ 0
#define VARTYPE_ 1
#include "bcast.H"

!---------------------------
#define RANK_ 0
#define VARTYPE_ 3
#include "bcast.H"

!---------------------------
#define RANK_ 0
#define VARTYPE_ 4
#include "bcast.H"

! Rank 1
!---------------------------
#define RANK_ 1
#define VARTYPE_ 1
#include "bcast.H"

!---------------------------
#define RANK_ 1
#define VARTYPE_ 3
#include "bcast.H"

!---------------------------
#define RANK_ 1
#define VARTYPE_ 4
#include "bcast.H"

! Rank 2
!---------------------------
#define RANK_ 2
#define VARTYPE_ 1
#include "bcast.H"

!---------------------------
#define RANK_ 2
#define VARTYPE_ 3
#include "bcast.H"

!---------------------------
#define RANK_ 2
#define VARTYPE_ 4
#include "bcast.H"


!--AllReduceMin -----------------
    
! Rank 0
!---------------------------
#define RANK_ 0
#define VARTYPE_ 1
#include "allreducemin.H"

!---------------------------
#define RANK_ 0
#define VARTYPE_ 3
#include "allreducemin.H"

!---------------------------
#define RANK_ 0
#define VARTYPE_ 4
#include "allreducemin.H"

! Rank 1
!---------------------------
#define RANK_ 1
#define VARTYPE_ 1
#include "allreducemin.H"

!---------------------------
#define RANK_ 1
#define VARTYPE_ 3
#include "allreducemin.H"

!---------------------------
#define RANK_ 1
#define VARTYPE_ 4
#include "allreducemin.H"

! Rank 2
!---------------------------
#define RANK_ 2
#define VARTYPE_ 1
#include "allreducemin.H"

!---------------------------
#define RANK_ 2
#define VARTYPE_ 3
#include "allreducemin.H"

!---------------------------
#define RANK_ 2
#define VARTYPE_ 4
#include "allreducemin.H"

!--AllReduceMax -----------------

! Rank 0
!---------------------------
#define RANK_ 0
#define VARTYPE_ 1
#include "allreducemax.H"

!---------------------------
#define RANK_ 0
#define VARTYPE_ 3
#include "allreducemax.H"

!---------------------------
#define RANK_ 0
#define VARTYPE_ 4
#include "allreducemax.H"

! Rank 1
!---------------------------
#define RANK_ 1
#define VARTYPE_ 1
#include "allreducemax.H"

!---------------------------
#define RANK_ 1
#define VARTYPE_ 3
#include "allreducemax.H"

!---------------------------
#define RANK_ 1
#define VARTYPE_ 4
#include "allreducemax.H"

! Rank 2
!---------------------------
#define RANK_ 2
#define VARTYPE_ 1
#include "allreducemax.H"

!---------------------------
#define RANK_ 2
#define VARTYPE_ 3
#include "allreducemax.H"

!---------------------------
#define RANK_ 2
#define VARTYPE_ 4
#include "allreducemax.H"

!--AllReduceSum -----------------

! Rank 0
!---------------------------
#define RANK_ 0
#define VARTYPE_ 1
#include "allreducesum.H"

!---------------------------
#define RANK_ 0
#define VARTYPE_ 3
#include "allreducesum.H"

!---------------------------
#define RANK_ 0
#define VARTYPE_ 4
#include "allreducesum.H"

! Rank 1
!---------------------------
#define RANK_ 1
#define VARTYPE_ 1
#include "allreducesum.H"

!---------------------------
#define RANK_ 1
#define VARTYPE_ 3
#include "allreducesum.H"

!---------------------------
#define RANK_ 1
#define VARTYPE_ 4
#include "allreducesum.H"

! Rank 2
!---------------------------
#define RANK_ 2
#define VARTYPE_ 1
#include "allreducesum.H"

!---------------------------
#define RANK_ 2
#define VARTYPE_ 3
#include "allreducesum.H"

!---------------------------
#define RANK_ 2
#define VARTYPE_ 4
#include "allreducesum.H"


! Scatter

!---------------------------
#define RANK_ 1
#define VARTYPE_ 3
#include "scatter.H"

!---------------------------
#define RANK_ 2
#define VARTYPE_ 3
#include "scatter.H"

!---------------------------
#define RANK_ 1
#define VARTYPE_ 4
#include "scatter.H"

!---------------------------
#define RANK_ 2
#define VARTYPE_ 4
#include "scatter.H"

!---------------------------
!---------------------------
#define RANK_ 1
#define VARTYPE_ 1
#include "gather.H"

!---------------------------
#define RANK_ 1
#define VARTYPE_ 3
#include "gather.H"

!---------------------------
#define RANK_ 2
#define VARTYPE_ 3
#include "gather.H"

!---------------------------
#define RANK_ 1
#define VARTYPE_ 4
#include "gather.H"

!---------------------------
#define RANK_ 2
#define VARTYPE_ 4
#include "gather.H"

!---------------------------
!---------------------------
#define RANK_ 1
#define VARTYPE_ 1
#include "allgather.H"

!---------------------------
!---------------------------
#define RANK_ 1
#define VARTYPE_ 2
#include "allgather.H"

!---------------------------
!---------------------------
#define RANK_ 1
#define VARTYPE_ 1
#include "allgatherv.H"

!---------------------------
!---------------------------
#define RANK_ 1
#define VARTYPE_ 3
#include "allgatherv.H"

!---------------------------
!---------------------------
#define RANK_ 0
#define VARTYPE_ 1
#include "send.H"

!---------------------------
#define RANK_ 1
#define VARTYPE_ 1
#include "send.H"

!---------------------------
#define RANK_ 1
#define VARTYPE_ 3
#include "send.H"

!---------------------------
#define RANK_ 2
#define VARTYPE_ 3
#include "send.H"


!---------------------------
#define RANK_ 1
#define VARTYPE_ 4
#include "send.H"

!---------------------------
#define RANK_ 2
#define VARTYPE_ 4
#include "send.H"

!---------------------------
!---------------------------
#define RANK_ 0
#define VARTYPE_ 1
#include "recv.H"

!---------------------------
#define RANK_ 1
#define VARTYPE_ 1
#include "recv.H"

!---------------------------
#define RANK_ 1
#define VARTYPE_ 3
#include "recv.H"

!---------------------------
#define RANK_ 2
#define VARTYPE_ 3
#include "recv.H"

!---------------------------
#define RANK_ 1
#define VARTYPE_ 4
#include "recv.H"

!---------------------------
#define RANK_ 2
#define VARTYPE_ 4
#include "recv.H"

!---------------------------
!---------------------------
#define RANK_ 0
#define VARTYPE_ 1
#include "sendrecv.H"

!---------------------------
#define RANK_ 1
#define VARTYPE_ 3
#include "sendrecv.H"

!---------------------------
#define RANK_ 2
#define VARTYPE_ 3
#include "sendrecv.H"

!---------------------------
#define RANK_ 1
#define VARTYPE_ 4
#include "sendrecv.H"

!---------------------------
#define RANK_ 2
#define VARTYPE_ 4
#include "sendrecv.H"

    subroutine MAPL_Abort

	call ESMF_Finalize(terminationFlag = ESMF_Abort)
    end subroutine MAPL_Abort

!---------------------------
!---------------------------

!---------------------------
#define RANK_ 1
#define VARTYPE_ 3
#include "arrayscatter.H"

!---------------------------
#define RANK_ 1
#define VARTYPE_ 4
#include "arrayscatter.H"

!---------------------------
#define RANK_ 2
#define VARTYPE_ 3
#include "arrayscatter.H"

!---------------------------
#define RANK_ 2
#define VARTYPE_ 4
#include "arrayscatter.H"

!---------------------------
#define RANK_ 1
#define VARTYPE_ 1
#include "arraygather.H"

!---------------------------
#define RANK_ 1
#define VARTYPE_ 3
#include "arraygather.H"

!---------------------------
#define RANK_ 1
#define VARTYPE_ 4
#include "arraygather.H"

!---------------------------
#define RANK_ 2
#define VARTYPE_ 3
#include "arraygather.H"

!---------------------------
#define RANK_ 2
#define VARTYPE_ 4
#include "arraygather.H"


!---------------------------
end module MAPL_CommsMod
